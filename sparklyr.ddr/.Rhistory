devtools::check()
ddR.env
ddR::available_backends()
ddR::useBackend()
ddR::useBackend('PSOC')
ddR::useBackend('PSOK')
ddR::useBackend('parallel')
ddR.env$registeredDrivers
ddR.env$registeredDrivers()
ddR.env$registeredDrivers
library(spark.ddr)
spark.ddr::hello()
data <- read.csv('/Users/krishnakalyan3/MOOC/MachineLearning/data/test.csv')
cols <- c('Id', 'X', 'Y')
summary(data$X)
hist(data$X)
hist(data$Y)
str(data$Y)
(data$Y[1:100])
(data$X[1:100])
(data$X[1:100])
mode <- rfsrc(Multivar(X, Y) ~ . , data_pred[1:100])
library('randomForestSRC')
mode <- rfsrc(Multivar(X, Y) ~ . , data_pred[1:100])
data_pred <- subset(data, select=cols)
data_pred$Dates <- as.POSIXlt(data_pred$Dates, "%Y-%m-%d h:m:s")
data$Datesdata_pred <- subset(data, select=cols)
data_pred$Dates <- as.POSIXlt(data_pred$Dates, "%Y-%m-%d h:m:s")
data_pred$Dates[2]
data$Datesdata_pred <- subset(data, select=cols)
data <- read.csv('/Users/krishnakalyan3/MOOC/MachineLearning/data/test.csv')
cols <- c('Id', 'X', 'Y')
data$Datesdata_pred <- subset(data, select=cols)
data_pred <- subset(data, select=cols)
data_pred$Dates <- as.POSIXlt(data_pred$Dates, "%Y-%m-%d h:m:s")
data_pred$Dates[2]
cols <- c('Dates', 'X', 'Y')
data_pred <- subset(data, select=cols)
data_pred$Dates <- as.POSIXlt(data_pred$Dates, "%Y-%m-%d h:m:s")
data_pred$Dates[2]
class(data_pred$Dates[2])
(data_pred$Dates[2])
library(lubridate)
install.packages('lubridate')
library(lubridate)
t.lub <- ymd_hms(data_pred$Dates[2])
t.lub
h.lub <- strptime(data_pred$Dates, "h")
t.lub <- strptime(data_pred$Dates, "h")
hour(t.lub)
t.lub <- ymd_hms(data_pred$Dates[2])
t.lub <- strptime(data_pred$Dates, "h")
t.lub <- strptime(t.lub, "h")
hour(t.lub)
t.lub <- ymd_hms(data_pred$Dates[2])
t.lub <- strptime(t.lub, "h")
hour(t.lub)
t.lub
t.lub <- ymd_hms(data_pred$Dates[2])
t.lub
t.lub <- strptime(t.lub, "h")
t.lub
h.str <- as.numeric(format(t.lub, "%H")) +
as.numeric(format(t.lub, "%M"))/60
t.lub <- ymd_hms(data_pred$Dates[2])
h.str <- as.numeric(format(t.lub, "%H")) +
as.numeric(format(t.lub, "%M"))/60
h.str
t.lub
t.lub
t.lub <- ymd_hms(data_pred$Dates[2])
h.str <- as.numeric(format(t.lub, "%H")) +
as.numeric(format(t.lub, "%M"))/60
hour.lub <- strptime(t.lub, "h")
hour.lub
data_pred$Dates[2]
t.lub <- ymd_hms(data_pred$Dates)
h.str <- as.numeric(format(t.lub, "%H")) +
as.numeric(format(t.lub, "%M"))/60
hour.lub <- strptime(t.lub, "h")
hour.lub
(data_pred$Dates[2])
t.lub <- ymd_hms(data_pred$Dates)
t.lub
format(t.lub, "%H")
as.numeric(format(t.lub, "%H"))
h.str
h.str
day.str <- weekdays(as.Date(t.lub))
day.str
str(day.str)
summary(day.str)
hist(day.str)
day.str <- as.numeric(weekdays(as.Date(t.lub)))
hist(day.str)
day.str <- weekdays(as.Date(t.lub))
day.str <- as.factor(weekdays(as.Date(t.lub)))
hist(day.str)
day.str
str(day.str)
summary(day.str)
final_data <- data.frame(h.str, day.str)
str(final_data)
final_data <- data.frame(h.str, day.str, data_pred$X, data_pred$Y)
str(final_data)
names(final_data) <- c('hours', 'weekend', 'lat', 'long')
str(final_data)
model <- rfsrc(Multivar(lat, long) ~ . , final_data[1:100])
str(final_data)
model <- rfsrc(Multivar(lat, long) ~ hours + weekend , final_data[1:100])
model <- rfsrc(Multivar(lat, long) ~ hours + weekend , final_data[1:100])
final_data[1:100]
model <- rfsrc(Multivar(lat, long) ~ hours + weekend , final_data[1:100, :])
model <- rfsrc(Multivar(lat, long) ~ hours + weekend , final_data[1:100,])
model
d <- final_data[1:100,]
d
predict(model, d)
predict(model, d)
?rfsrc
predict.oob(model, d)
install.packages("e1071")
library(e1071)
formula <- Multivar(lat, long) ~ hours + weekend
model <- rfsrc(formula, final_data[1:100,])
model_svr <- svm(formula, d)
model <- rfsrc(formula, final_data[1:100,])
?Multivar
??Multivar
model <- rfsrc(formula, final_data[1:100,])
predict(model, d)
k <- predict(model, d)
k
k <- predicting(model, d)
?rfsrc
k <- predict.rfsrc(model, d)
k
k <- importance(model, d)
model <- lm(formula, final_data[1:100,])
formula <- cbind(lat, long) ~ hours + weekend
model <- lm(formula, final_data[1:100,])
model <- glm(formula, final_data[1:100,])
model
model <- glm(formula, final_data[1:100,])
d
str(d)
h.str
h.str <- as.integer(h.str)
h.str
h.str <- as.factor(h.str)
final_data <- data.frame(h.str, day.str, data_pred$X, data_pred$Y)
names(final_data) <- c('hours', 'weekend', 'lat', 'long')
str(final_data)
formula <- cbind(lat, long) ~ hours + weekend
model <- glm(formula, final_data[1:100,])
data_sub <- final_data[1:100,]
data_sub <- final_data[1:100,]
formula <- cbind(lat, long) ~ hours + weekend
model <- glm(formula, final_data[1:100,])
model <- glm(formula, final_data)
str(data_sub)
install.packages("lme4")
library(lmer)
str(data_sub)
ibrary(rworldmap)
newmap <- getMap(resolution = "low")
library(rworldmap)
install.packages('rworldmap')
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
plot(newmap,  asp = 1)
str(final_data)
summary(final_data)
plot(newmap, xlim = c(-122.5, 120.5), ylim = c(37.1, 90), asp = 1)
plot(newmap, xlim = c(-122.5, 120.5), ylim = c(37.71, 90), asp = 1)
plot(newmap, xlim = c(-122.5, 120.5), ylim = c(37.71, 90), asp = 10)
plot(newmap, xlim = c(-122.5, 120.5), ylim = c(37.71, 90), asp = 1)
plot(newmap, xlim = c(-12, 120.5), ylim = c(37.71, 90), asp = 1)
plot(newmap, xlim = c(-12, 12), ylim = c(37.71, 90), asp = 1)
plot(newmap, xlim = c(-122, 120.5), ylim = c(37.71, 90), asp = 1)
plot(newmap, xlim = c(-122, 120), ylim = c(37.71, 90), asp = 1)
plot(newmap, xlim = c(-122, 120), ylim = c(37, 90), asp = 1)
?rworldmap
install.packages('geohash')
install.packages('doMC')
registerDoMC(4)
library(doMC)
registerDoMC(4)
library('geohash')
geo_hash <- function(lat, long){
library(geohash)
enc <- gh_encode(lat = lat, lng = long, precision = 3)
return(enc)
}
geo_hash <- function(lat, long){
library(geohash)
enc <- gh_encode(lat = lat, lng = long, precision = 3)
return(enc)
}
lapply(geo_hash, 52.05293, -0.364508)
lapply(geo_hash, data_sub$, -0.364508)
lapply(geo_hash, data_sub$lat,  data_sub$long)
?lapply
lapply(data_sub$lat,  data_sub$long, geo_hash)
lapply(cbind(data_sub$lat,  data_sub$long), geo_hash)
geo_hash(data_sub$lat,  data_sub$long)
geo_hash <- function(lat, long){
library(geohash)
enc <- gh_encode(lat = lat, lng = long, precision = 5)
return(enc)
}
geo_hash(data_sub$lat,  data_sub$long)
hist(m)
m <- geo_hash(data_sub$lat,  data_sub$long)
hist(m)
plot(m)
table(m)
geo_hash <- function(lat, long){
library(geohash)
enc <- gh_encode(lat = lat, lng = long, precision = 6)
return(enc)
}
m <- geo_hash(data_sub$lat,  data_sub$long)
table(m)
geo_hash <- function(lat, long){
library(geohash)
enc <- gh_encode(lat = lat, lng = long, precision = 2)
return(enc)
}
m <- geo_hash(data_sub$lat,  data_sub$long)
table(m)
geo_hash <- function(lat, long){
library(geohash)
enc <- gh_encode(lat = lat, lng = long, precision = 6)
return(enc)
}
m <- geo_hash(data_sub$lat,  data_sub$long)
m
table(m)
m <- geo_hash(data_pred$lat,  data_pred$long)
m <- geo_hash(data_pred$X,  data_pred$Y)
m
table(m)
hashed_data <- geo_hash(data_pred$X,  data_pred$Y)
?geo_hash_decode
??geo_hash_decode
library(geohash)
geo_hash_decode("hb4b42")
gh_decode("hb4b42")
hashed_data[1]
cbind(data_pred$X[1],  data_pred$Y[1])
geo_hash <- function(lat, long){
library(geohash)
enc <- gh_encode(lat = lat, lng = long, precision = 8)
return(enc)
}
hashed_data <- geo_hash(data_pred$X,  data_pred$Y)
hashed_data[1]
cbind(data_pred$X[1],  data_pred$Y[1])
geo_hash_decode <- function(region){
library(geohash)
gh_decode("hb4b42")
geo_hash_decode()
}
gh_decode("hb4b48jb")
table(hashed_data)
gh_decode("hb4b5200")
data_pred$X
geo_hash <- function(lat, long){
library(geohash)
enc <- gh_encode(lat = lat, lng = long, precision = 15)
return(enc)
}
hashed_data <- geo_hash(data_pred$X,  data_pred$Y)
table(hashed_data)
hashed_data[1]
cbind(data_pred$X[1],  data_pred$Y[1])
gh_decode("hb4b4248n8")
gh_encode(lat = 42.60498046875, lng = -5.60302734375, precision = 5)
cbind(data_pred$X[1],  data_pred$Y[1])
gh_encode(lat = -122.3996, lng = 37.73505, precision = 5)
gh_decode("hb4b4")
gh_encode(lat = -122.3996, lng = 37.73505, precision = 2)
gh_decode("hb4b4")
d <- cbind(data_pred$X,  data_pred$Y)
plot(d, col = km$cluster, pch = 20)
plot(d,  pch = 20)
plot(data_sub,  pch = 20)
install.packages('fpc')
library(fpc)
library(fpc)
db_scan <-dbscan(d, eps = 1.5, MinPts = 3)
db_scan
d <- cbind(data_pred$X,  data_pred$Y)[1:100]
db_scan <-dbscan(d, eps = 1.5, MinPts = 3)
plot(d[:, 1], d[:, 2], col = db_scan$cluster, pch = 20)
plot(d, col = db_scan$cluster, pch = 20)
d
d <- cbind(data_pred$X,  data_pred$Y)[1:100]
d
d <- cbind(data_pred$X,  data_pred$Y)
d
d <- cbind(data_pred$X[1:100],  data_pred$Y[1:100])
d
db_scan <-dbscan(d, eps = 1.5, MinPts = 3)
d
plot(d, col = db_scan$cluster, pch = 20)
d
plot(d, col = db_scan$cluster, pch = 20)
db_scan$cluster
db_scan <-dbscan(d, MinPts = 3)
db_scan <-dbscan(d, eps = 3, MinPts = 3)
plot(d, col = db_scan$cluster, pch = 20)
db_scan$cluster
db_scan <-dbscan(d, eps = 0.1, MinPts = 3)
db_scan$cluster
db_scan <-dbscan(d, eps = 0.1, MinPts = 5)
db_scan$cluster
d <- cbind(data_pred$X[1:1000],  data_pred$Y[1:1000])
d
db_scan <-dbscan(d, eps = 0.1, MinPts = 5)
db_scan$cluster
plot(d, col = db_scan$cluster, pch = 20)
db_scan <-dbscan(d, eps = 0.01, MinPts = 5)
db_scan$cluster
plot(d, col = db_scan$cluster, pch = 20)
db_scan <-dbscan(d, eps = 0.0001, MinPts = 5)
db_scan$cluster
plot(d, col = db_scan$cluster, pch = 20)
db_scan <-dbscan(d, eps = 0.0001, MinPts = 3)
db_scan$cluster
plot(d, col = db_scan$cluster, pch = 20)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.001, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.01, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.009, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.0009, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.0069, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.0066, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.00066, MinPts = 3)
table(db_scan$cluster)
irisCluster <- kmeans(d, 3, nstart = 20)
k_means
k_means <- kmeans(d, 3, nstart = 20)
k_means$centers
k_means$cluster
table(k_means$cluster)
k_means <- kmeans(d, 10, nstart = 20)
table(k_means$cluster)
db_scan$cluster
db_scan <-dbscan(d, eps = 0.0006, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.004, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.04, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.004, MinPts = 3)
table(db_scan$cluster)
db_scan <-dbscan(d, eps = 0.009, MinPts = 3)
table(db_scan$cluster)
k_means <- kmeans(d, 10, nstart = 20)
table(k_means$cluster)
d
cbind(d, k_means$cluster)
plot(d)
plot(d, pch=20)
plot(d, color=k_means$cluster, pch=20)
plot(d, color=k_means$cluster, pch=20)
plot(d, col=k_means$cluster, pch=20)
k_means <- kmeans(data_pred$X,  data_pred$Y, 10, nstart = 20)
k_means <- kmeans(data_pred$X,  data_pred$Y, 10)
z <- cbind(data_pred$X,  data_pred$Y)
k_means <- kmeans(z, 10)
table(k_means$cluster)
plot(z, col=k_means$cluster, pch=20)
table(k_means$cluster)
data_pred
head(data_pred)
summary(final_data)
head(final_data)
out_data <- data.frame(final_data, k_means$cluster)
head(out_data)
summary(out_data)
table(k_means$cluster)
data <- read.csv('/Users/krishnakalyan3/MOOC/MachineLearning/data/test.csv')
str(data)
summary(data$Id)
table(data$Id)
cols <- c('Dates', 'X', 'Y', 'Id')
data_pred <- subset(data, select=cols)
head(data_pred)
cols <- c('Id', 'Dates', 'X', 'Y')
data_pred <- subset(data, select=cols)
head(data_pred)
data_pred <- subset(data, select=cols)
head(data_pred)
data_pred$Dates <- as.POSIXlt(data_pred$Dates, "%Y-%m-%d h:m:s")
(data_pred$Dates[2])
library(lubridate)
t.lub <- ymd_hms(data_pred$Dates)
h.str <- as.numeric(format(t.lub, "%H")) + as.numeric(format(t.lub, "%M"))/60
h.str <- as.integer(h.str)
h.str <- as.factor(h.str)
day.str <- as.factor(weekdays(as.Date(t.lub)))
summary(day.str)
final_data <- data.frame(h.str, day.str)
names(final_data) <- c('hours', 'weekend')
data_pred_v1 <- data.frame(data_pred, final_data)
str(data_pred_v1)
data_pred_v2 <- data.frame(data_pred_v1, k_means$cluster)
str(data_pred_v2)
write.csv(data_pred_v2, file = "crime_data",row.names=FALSE)
getwd()
str(data_pred_v2)
table(data_pred_v2$k_means.cluster)
253393/sum(table(data_pred_v2$k_means.cluster))
cols <- c('X', 'Y', 'k_means.cluster')
cols <- c('X', 'Y', 'k_means.cluster')
data_pred <- subset(data_pred_v2, select=cols)
write.csv(data_pred_v2, file = "mongo_data.csv",row.names=FALSE)
getwd()
write.csv(data_pred, file = "mongo_data.csv",row.names=FALSE)
head(out_data)
out_data$hours
